{"ast":null,"code":"var _jsxFileName = \"/Users/thomaspisfil/Code/blog-mern/myblog/src/pages/Article.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport articleContent from './article-content';\nimport Articles from '../components/Articles';\nimport NotFound from './NotFound';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Article = ({\n  match\n}) => {\n  _s();\n\n  const name = match.params.name;\n  const article = articleContent.find(article => article.name === name); // const article = articleContent.find( articlehello => articlehello.name === name );\n\n  const [articleInfo, setArticleInfo] = useState({\n    comments: []\n  }); //state gives us a place to temporarily load our information that we call from the server\n  //so in this case its going to be holding the comments \n  //you can usually have it as an empty object but we added the property comments\n  //useEffect runs every time this component is called \n  //we usually want this so that it already has our data from whatever server or API \n  //we need already ready for us to use once the page has been loaded up. \n\n  useEffect(() => {\n    const fetchData = async () => {\n      //useEffect cannot use an async function so we have to create one inside of it\n      const result = await fetch(`/api/articles/${name}`); //we added proxy in the package.json file which allows us access to this\n      //await will make sure we wait to fetch the info from the server and then move on with the rest of the code\n\n      const body = await result.json();\n      console.log(\"this is the body we get \");\n      console.log(\"this is the body we get \");\n      setArticleInfo(body);\n    };\n\n    fetchData(); //now we're calling the function that we just defined up there ^ \n  }, [name]);\n  if (!article) return /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 26\n  }, this);\n  const otherArticles = articleContent.filter(article => article.name !== name);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"sm:text-4xl text-2xl font-bold mt-6 pt-20 text-gray-900\",\n      children: article.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), article.content.map((paragraph, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mx-auto leading-relaxed text-base mb-4\",\n      children: paragraph\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"sm:text-2x text-xl font-bold mt-4 mb-4 text-gray-900\",\n      children: \"Other Articles\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap -m-4\",\n      children: /*#__PURE__*/_jsxDEV(Articles, {\n        articles: otherArticles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Article, \"maXGORTm90dby4JGYHQC+C1at+E=\");\n\n_c = Article;\nexport default Article;\n\nvar _c;\n\n$RefreshReg$(_c, \"Article\");","map":{"version":3,"sources":["/Users/thomaspisfil/Code/blog-mern/myblog/src/pages/Article.js"],"names":["React","useState","useEffect","articleContent","Articles","NotFound","Article","match","name","params","article","find","articleInfo","setArticleInfo","comments","fetchData","result","fetch","body","json","console","log","otherArticles","filter","title","content","map","paragraph","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAAA;;AACzB,QAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaD,IAA1B;AACA,QAAME,OAAO,GAAGP,cAAc,CAACQ,IAAf,CAAqBD,OAAO,IAAIA,OAAO,CAACF,IAAR,KAAiBA,IAAjD,CAAhB,CAFyB,CAGzB;;AAEA,QAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC;AAC3Ca,IAAAA,QAAQ,EAAE;AADiC,GAAD,CAA9C,CALyB,CAQzB;AACA;AACA;AAEA;AACA;AACA;;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMa,SAAS,GAAG,YAAY;AAAE;AAC5B,YAAMC,MAAM,GAAG,MAAMC,KAAK,CAAE,iBAAgBT,IAAK,EAAvB,CAA1B,CAD0B,CAC2B;AACrD;;AACA,YAAMU,IAAI,GAAG,MAAMF,MAAM,CAACG,IAAP,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAR,MAAAA,cAAc,CAACK,IAAD,CAAd;AACH,KAPD;;AAQAH,IAAAA,SAAS,GATG,CASC;AAChB,GAVQ,EAUN,CAACP,IAAD,CAVM,CAAT;AAaA,MAAI,CAACE,OAAL,EAAc,oBAAO,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AAEd,QAAMY,aAAa,GAAGnB,cAAc,CAACoB,MAAf,CAAsBb,OAAO,IAAIA,OAAO,CAACF,IAAR,KAAiBA,IAAlD,CAAtB;AAEA,sBACI;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,yDAAd;AAAA,gBAAyEE,OAAO,CAACc;AAAjF;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKd,OAAO,CAACe,OAAR,CAAgBC,GAAhB,CAAqB,CAACC,SAAD,EAAWC,KAAX,kBAClB;AAAG,MAAA,SAAS,EAAC,wCAAb;AAAA,gBAAmED;AAAnE,OAA2DC,KAA3D;AAAA;AAAA;AAAA;AAAA,YADH,CAFL,eAMI;AAAI,MAAA,SAAS,EAAC,sDAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eAOI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,6BACI,QAAC,QAAD;AAAU,QAAA,QAAQ,EAAEN;AAApB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA,kBADJ;AAaH,CA9CD;;GAAMhB,O;;KAAAA,O;AAgDN,eAAeA,OAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport articleContent from './article-content';\nimport Articles from '../components/Articles';\nimport NotFound from './NotFound';\n\nconst Article = ({match}) => {\n    const name = match.params.name;\n    const article = articleContent.find( article => article.name === name );\n    // const article = articleContent.find( articlehello => articlehello.name === name );\n\n    const [articleInfo, setArticleInfo] = useState({\n        comments: []\n    }); \n    //state gives us a place to temporarily load our information that we call from the server\n    //so in this case its going to be holding the comments \n    //you can usually have it as an empty object but we added the property comments\n\n    //useEffect runs every time this component is called \n    //we usually want this so that it already has our data from whatever server or API \n    //we need already ready for us to use once the page has been loaded up. \n\n    useEffect(() => {\n        const fetchData = async () => { //useEffect cannot use an async function so we have to create one inside of it\n            const result = await fetch(`/api/articles/${name}`); //we added proxy in the package.json file which allows us access to this\n            //await will make sure we wait to fetch the info from the server and then move on with the rest of the code\n            const body = await result.json();\n            console.log(\"this is the body we get \");\n            console.log(\"this is the body we get \");\n            setArticleInfo(body); \n        };\n        fetchData(); //now we're calling the function that we just defined up there ^ \n    }, [name]); \n\n\n    if (!article) return <NotFound />\n\n    const otherArticles = articleContent.filter(article => article.name !== name)\n\n    return (\n        <>\n            <h1 className=\"sm:text-4xl text-2xl font-bold mt-6 pt-20 text-gray-900\">{article.title}</h1>\n            {article.content.map( (paragraph,index) => (\n                <p className='mx-auto leading-relaxed text-base mb-4' key={index}>{paragraph}</p>\n            ))}\n\n            <h1 className='sm:text-2x text-xl font-bold mt-4 mb-4 text-gray-900'>Other Articles</h1>\n            <div className=\"flex flex-wrap -m-4\">\n                <Articles articles={otherArticles} />\n            </div>\n        </>\n    );\n};\n\nexport default Article; "]},"metadata":{},"sourceType":"module"}